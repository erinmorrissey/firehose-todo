<section class="todoapp">
  <header class="header">
    <h1>foood</h1>
  </header>

  <section class="main">
    <ul class="todo-list">

    </ul>
  </section>
</section>





<script>

  // registers all code within curly braces to be executed after the page loads
  $(function() {

    // taskHtml takes in a JS representation of the task, that came from the JSON response, and produces an HTML representation using <li> tags
    function taskHtml(task) {
      var checkedStatus = task.done ? 'checked' : '';
      var liElement = '<li><div class="view"><input class="toggle" type="checkbox" data-id="' + task.id + '"' + checkedStatus + '><label>' + task.title + '</label></div></li>';
      return liElement;
    }

    // toggleTask takes in an HTML representation of the event that fires from the checkbox toggle action & performs a PUT API request to update the value of the 'done' field in the DB
    function toggleTask(e) {
      var itemId = $(e.target).data("id");
      var doneValue = Boolean($(e.target).is(':checked'));
      $.post("/tasks/" + itemId, {
        _method: "PUT",
        task: {
          done: doneValue
        }
      });
    }

    // we call the method .success on the OBJECT that the $.get value returns, which allows us to set a callback function to run when a successful response happens
    // we set 'data' to equal the JSON response
    $.get('/tasks').success( function( data ) {
      // builds an empty var to store the ENTIRE block of li code
      var htmlString = '';
      $.each(data, function(index, task) {
        // passes a JS representation of a task, passes it to taskHTML, & pops the returned liElement into htmlString
        htmlString += taskHtml(task);
      });

      // grabs the ul element with class of .todo-list
      var ulTodos = $('.todo-list');

      // inserts htmlString code INTO the ul block
      ulTodos.html(htmlString);

      // handle the checkbox functionality
      $('.toggle').change(toggleTask);

    });
  });
</script>